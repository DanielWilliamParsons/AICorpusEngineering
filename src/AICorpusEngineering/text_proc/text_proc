import os
import re
import random
import math
import pandas as pd
from collections import defaultdict, Counter
from tag_map import TagMapper

class TextProc:

    def __init__(self, root_dir):
        print("Initialize text processor")
        self.root_dir = root_dir
        self.tag_map = TagMapper()

    def map_tag(self, tag: str) -> str:
        return self.TAG_MAP.get(tag, "word")

    # ----------
    # Loop through corpus texts and extract language
    # ----------
    def collect_lang(self, tag: str):
        """
        Extracts sentences which contain language tagged with a specified tag value
        For example, specifying the tag as "_ADV" will extract sentences from the corpus which contain
        adverbs tagged with _ADV.
        Assumes a tagged text file contains one tagged sentence per line with line breaks for paragraphs
        TODO: Later introduce a flag to indicate this format, e.g., otspl = true / false
        """
        records = [] # Will be a list of dictionaries: {lang, file, line, sentence}
        tag_pattern = re.compile(r'(\b\w+)\s*{tag}\b', re.IGNORECASE)

        for dirpath, _, filenames in os.walk(self.root_dir):
            for fname in filenames:
                file_path = os.path.join(dirpath, fname)
                with open(file_path, "r", encoding="utf-8") as f:
                    for line_num, line in enumerate(f, 1):
                        sentence = line.strip()
                        for match in tag_pattern.finditer(sentence):
                            pos = match.group(1)
                            key = self.tag_map.map_tag(tag)
                            records.append({
                                key: pos.lower(),
                                "file": fname,
                                "line": line_num,
                                "sentence": sentence # Should I remove the POS tags?
                            })